import numpy as np
from gymnasium.spaces import Box, Tuple
from envs.HalfCheetah.HalfCheetahBace import HalfCheetahBace


class HalfCheetahVel(HalfCheetahBace):
    """Half-cheetah environment with target velocity, as described in [1]. The 
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each 
    time step a reward composed of a control cost and a penalty equal to the 
    difference between its current velocity and the target velocity. The tasks 
    are generated by sampling the target velocities from the uniform 
    distribution on [0, 2].

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic 
        Meta-Learning for Fast Adaptation of Deep Networks", 2017 
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for 
        model-based control", 2012 
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """

    def __init__(self, task: dict = {}, low=0.0, high=2.0, render_mode=None):
        super(HalfCheetahVel, self).__init__()
        self._task = task
        self.low = low
        self.high = high
        self.render_mode = render_mode
        self._goal_vel = task.setdefault('velocity', 0.0)
        self._one_hot = task.setdefault('one_hot', [0])
        self.observation_space = Tuple([Box(float('-inf'), float('inf'), (len(super()._get_obs()),), np.float32),
                                        Box(0, 1, (len(self._one_hot),), np.float32)])

    def _get_obs(self):
        obs = super()._get_obs()
        return [obs, self._one_hot]

    def _step(self, action):
        xposbefore = self.data.qpos[0]
        self.do_simulation(action, self.frame_skip)
        xposafter = self.data.qpos[0]

        forward_vel = (xposafter - xposbefore) / self.dt
        forward_reward = -1.0 * abs(forward_vel - self._goal_vel)
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        observation = self._get_obs()
        reward = forward_reward - ctrl_cost
        return observation, reward, False, ''

    def sample_tasks(self, num_tasks):
        velocities = self.np_random.uniform(self.low, self.high, size=(num_tasks,))
        tasks = [{'velocity': velocity} for velocity in velocities]
        return tasks

    def reset_task(self, task):
        self._task = task
        self._goal_vel = task['velocity']
